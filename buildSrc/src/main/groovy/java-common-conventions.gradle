/*
 * Copyright 2024 Marcel Baumann
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *          https://apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 *
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'pmd' apply false
    id 'org.sonarqube'
    id 'info.solidsoft.pitest'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { setUrl("https://plugins.gradle.org/m2/") }
    maven { url "https://maven.vaadin.com/vaadin-addons" }
    maven { url "https://raw.github.com/ZUGFeRD/mustangproject/mvn-repo" }
    maven { url "https://repo.microstream.one/repository/maven-public/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://repo.e-iceblue.com/nexus/content/groups/public/" }
}

dependencies {
    compileOnly(libs.lombok)
    annotationProcessor(libs.lombok)
    compileOnly(libs.annotations)
    implementation(libs.apache.log4j2.api)
    runtimeOnly(libs.apache.log4j2.core)
    runtimeOnly(libs.apache.log4j2.slf4j)

    testCompileOnly(libs.lombok);
    testAnnotationProcessor(libs.lombok)
    testCompileOnly(libs.annotations)
    testImplementation(libs.bundles.test.deps)
    testImplementation(libs.apache.log4j2.core)
    testRuntimeOnly(libs.apache.log4j2.slf4j)
    testRuntimeOnly(libs.junit.engine)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.fork = true
    options.incremental = true
    options.warnings = true
    options.deprecation = true
    options.compilerArgs += ["-parameters",
                             "--enable-preview",
                             "-Xlint:-this-escape,-serial,-varargs,-processing,-try",
                             "-Xdoclint:none"]
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    jvmArgs += ['--enable-preview',
                '--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED',
                '--add-exports=java.base/jdk.internal.misc=org.eclipse.serializer.base',
                '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED',
                '--add-opens=java.base/java.io=ALL-UNNAMED',
                '-XX:+ShowCodeDetailsInExceptionMessages']
    reports.junitXml.mergeReruns = true
    options {
        setExcludeTags(['integration'] as Set)
    }
    maxParallelForks = 12
    failFast = false
}

tasks.withType(Javadoc).configureEach {
    javadoc.options {
        encoding("UTF-8")
        addBooleanOption('Xdoclint:none', true)
        addStringOption("Xmaxwarns", "1")
        addBooleanOption('-enable-preview', true)
        addStringOption('-release', '23')
        addBooleanOption('-docfilessubdirs')
        addStringOption('-snippet-path', "${projectDir}/src/test/java")
        addBooleanOption('quiet')
    }
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += ['--enable-preview',
                '--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED',
                '--add-exports=java.base/jdk.internal.misc=org.eclipse.serializer.base',
                '-XX:+ShowCodeDetailsInExceptionMessages']
}

jar {
    doFirst {
        manifest {
            attributes('Name': project.name,
                'Automatic-Module-Name': project.ext.moduleName,
                'Specification-Title': "tangly open source library $project.ext.artifactId",
                'Specification-Version': project.version,
                'Specification-Vendor': "tangyly llc, Switzerland (https://blog.tangly.net)",
                'License': 'Apache License v2.0',
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': "tangyly llc, Switzerland (https://blog.tangly.net)",
                'Build-Jdk': "${System.properties['java.version']}",
                "Class-Path": configurations.runtimeClasspath.files.collect { it.getName() }.join(' '))
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            afterEvaluate {
                groupId = project.ext.groupId
                artifactId = project.ext.artifactId
                version = project.version
            }
            from components.java
            pom {
                afterEvaluate {
                    name = project.ext.moduleName
                    description = project.description
                    url = 'https://blog.tangly.net'
                    inceptionYear = project.ext.inceptionYear
                }
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'marcelbaumann'
                        name = 'Marcel Baumann'
                        email = 'marcel.baumann@tangly.net'
                        organization = 'tangly llc'
                        organizationUrl = 'https://blog.tangly.net'
                    }
                    developer {
                        id = 'alexandra-junghans'
                        name = 'Alexandra Junghans'
                        email = 'alexandra.junghans@tangly.net'
                        organization = 'tangly llc'
                        organizationUrl = 'https://blog.tangly.net'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/tangly-team/tangly-os.git'
                    developerConnection = 'scm:git:https://github.com/tangly-team/tangly-os.git'
                    url = 'https://github.com/tangly-team/tangly-os.git'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                // credentials are stored under ~/.gradle/gradle.properties and are first copied in local variables to avoid error if not defined fpr
                // example in CI pipeline (private keys should not be uploaded to a cloud CI)
                // the credentials for net.tangly account are not token based.
                credentials {
                    username mavenCentralUsername
                    password mavenCentralPassword
                }
            }
        }
    }
}

signing {
    // credentials for signing are stored under ~/.gradle/gradle.properties
    // gpg --export-secret-keys -o ~/.gnupg/secring.kbx
    // gpg --no-default-keyring --keyring ./secring.gpg --list-keys --keyid-format short
    sign publishing.publications.mavenJava
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "tangly-os-at-tangly.net"
        property "sonar.organization", "tangly-os"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.language", "java"
        property "sonar.java.source", "1"
        property "sonar.coverage.jacoco.reportPath5s", "**/build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

pmd {
    ruleSetFiles = files(rootProject.file('src/main/resources/pmd-tangly.xml'))
    toolVersion = "7.5.0"
    ignoreFailures = true
    incrementalAnalysis = true
    rulesMinimumPriority = 3
}
